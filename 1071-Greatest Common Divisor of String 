class Solution {
public:
    // Function to check if str can be formed by repeating pattern
    bool isDivisible(string str, string pattern) {
        int len = str.length();
        int patLen = pattern.length();
        if (len % patLen != 0) return false;

        string repeated = "";
        for (int i = 0; i < len / patLen; ++i) {
            repeated += pattern;
        }
        return repeated == str;
    }

    string gcdOfStrings(string str1, string str2) {
        // If str1 + str2 != str2 + str1, there is no common divisor string
        if (str1 + str2 != str2 + str1) return "";

        // Find GCD of the lengths of str1 and str2
        int len1 = str1.length();
        int len2 = str2.length();
        int gcdLen = gcd(len1, len2);

        // The substring of str1 with length gcdLen is the answer
        return str1.substr(0, gcdLen);
    }

private:
    // Helper function to compute GCD of two integers
    int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
};
